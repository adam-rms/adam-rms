<!--Sortable-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js" integrity="sha256-KM512VNnjElC30ehFwehXjx1YCHPiQkOPmqnrWtpccM=" crossorigin="anonymous"></script>
<!-- Resolve conflict in jQuery UI tooltip with Bootstrap tooltip -->
<script>
    $.widget.bridge('uibutton', $.ui.button)
</script>
<style>
    .scrolling-head {
        display: flex;
        flex-wrap: wrap;
    }
    @media only screen and (max-width: 768px) {
        .scrolling-head {
            display: block;
        }
        .scrolling-head > div {
            width: 100%;
            max-width: 100%;
        }
    }
</style>
<div class="card card-primary card-outline card-outline-tabs">
    <div class="card-header p-0 border-bottom-0 card-tabs">
        <ul class="nav nav-tabs" id="asset-list-tabs-tab" role="tablist">
            {% if FINANCIALS.assetsAssigned|length > 0 %}
                <li class="nav-item">
                    <a class="nav-link active assetsBoardToggle" id="asset-board-tab-thisinstance" data-toggle="pill" href="#asset-board-thisinstance" role="tab" aria-controls="asset-board-thisinstance" aria-selected="false">{{ USERDATA.instance.instances_name }}</a>
                </li>
            {% endif %}
            {% for instance in FINANCIALS.assetsAssignedSUB %}
                <li class="nav-item">
                    <a class="nav-link assetsBoardToggle" id="asset-board-tab-instance{{ instance['instance'].instances_id }}" data-toggle="pill" href="#asset-board-instance{{ instance['instance'].instances_id }}" role="tab" aria-controls="asset-board-instance{{ instance['instance'].instances_id }}" aria-selected="false">{{  instance['instance'].instances_name }} Assets</a>
                </li>
            {% endfor %}
        </ul>
    </div>
    <div class="card-body p-0">
        <div class="tab-content" id="asset-board-tabs-tabContent">
            <div class="tab-pane show active p2" id="asset-board-thisinstance" role="tabpanel" aria-labelledby="asset-list-tabs-profile-tab">
                {% embed 'project/twigIncludes/assetBoard/board.twig' with {"instanceAssets": BOARDASSETS[USERDATA.instance["instances_id"]], "instanceid":USERDATA.instance["instances_id"] } %}
                {% endembed %}
            </div>
            {% for instance in FINANCIALS.assetsAssignedSUB %}
            <div class="tab-pane p2" id="asset-board-instance{{ instance['instance']['instances_id'] }}">
                {% embed 'project/twigIncludes/assetBoard/board.twig' with {"instanceAssets": BOARDASSETS[instance['instance']['instances_id']], "instanceid":instance['instance']['instances_id'] } %}
                {% endembed %}
            </div>
            {% endfor %}
        </div>
    </div>
</div>
<script>
    const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000
    });

    if (localStorage.getItem("activeTab-board")) {
        $('a.assetsBoardToggle[href=\'#' + localStorage.getItem("activeTab-board") + '\']').tab('show');
    }

    {% if "PROJECTS:PROJECT_ASSETS:EDIT:ASSIGNMENT_STATUS"|instancePermissions %}

    // Create an array of status ids, ordered
    const assetStatusesRaw = JSON.parse('{{ BOARDSTATUSES|json_encode|raw }}');
    var assetStatuses = {};
    for (const [instanceid, instanceStatuses] of Object.entries(assetStatusesRaw)) {
        var newDir = {"orderedStatusIds": [], "allData": instanceStatuses};
        // In theory, if the statuses have been sorted by the user dragging them around then the orders will be in order and so JS will recognise them as an array. Otherwise they'll be an object (e.g. if someone has deleted a status but not dragged them around)
        if (Array.isArray(instanceStatuses)) {
            instanceStatuses.forEach((item) => {
                newDir["orderedStatusIds"].push(item["assetsAssignmentsStatus_id"]);
            });
        } else if (typeof instanceStatuses === 'object') {
            for (const [key, value] of Object.entries(instanceStatuses)) {
                newDir["orderedStatusIds"].push(value["assetsAssignmentsStatus_id"]);
            }
        }
        assetStatuses[instanceid] = newDir;
    }
    // Show/Hide relevant buttons for touchscreen control
    function drawButtons() {
        $('.assetDispatchAssetList').each(function(){
            var instance = $(this).data("instance");
            var statusid = $(this).data("statusid");
            var position = assetStatuses[instance]['orderedStatusIds'].indexOf(statusid);
            var prev = (position == 0 ? false : assetStatuses[instance]['orderedStatusIds'][position-1]);
            var next = (position == assetStatuses[instance]['orderedStatusIds'].length - 1 ? false : assetStatuses[instance]['orderedStatusIds'][position+1]);

            $(this).find(".assetDispatchAssetList-statusPrevButton").css('display', prev === false ? 'none': 'block');
            $(this).find(".assetDispatchAssetList-statusPrevButton").data('nextstatus', prev);
            $(this).find(".assetDispatchAssetList-statusNextButton").css('display', next === false ? 'none': 'block');
            $(this).find(".assetDispatchAssetList-statusNextButton").data('nextstatus', next);
        });
    }
    /**
     * Function to change the status of an asset assignment
     * @param assetsAssignments_id Id of the AssetAssignment
     * @param assetsAssignments_status new status id of the AssetAssignment
     */
    function changeStatus(assetsAssignments_id, assetsAssignments_status) {
        ajaxcall("projects/assets/setStatus.php", {"assetsAssignments_id":assetsAssignments_id, "assetsAssignments_status":assetsAssignments_status}, function (returned) {
            drawButtons();
            Toast.fire({
                type: 'success',
                title: 'Asset Status Updated'
            });
        });
    }
    {% endif %}
    $(document).ready(function () {
        {% if "PROJECTS:PROJECT_ASSETS:EDIT:ASSIGNMENT_STATUS"|instancePermissions %}
        drawButtons();
        $(".assetDispatchAssetList").sortable({
            connectWith: "div",
            update: function( event, ui ){
                /*
                Update function is called twice, once for the old list and once for the new list.
                The lists, this, have a data attribute, status, that can be compared with each asset, ui.item[0].
                If the groupStatus is the same as the old status, this call can be ignored as this is the old list update call.
                Function call will refresh the page and sort any graphical issues.
                 */
                const groupStatus = this.dataset.statusid;
                const assetOldStatus = ui.item[0].dataset.currentstatus;
                const assetAssignment = ui.item[0].dataset.assignment;

                if (assetOldStatus !== groupStatus) {
                    changeStatus(parseInt(assetAssignment),parseInt(groupStatus));
                    ui.item[0].dataset.currentstatus = groupStatus;
                }
            }
        });

        $(".assetDispatchAssetList-statusPrevButton,.assetDispatchAssetList-statusNextButton").click(function (){
            const assetCard = $(this).parent();
            const assetAssignment = assetCard.data("assignment");
            const assetNextStatus = $(this).data("nextstatus");
            changeStatus(parseInt(assetAssignment),parseInt(assetNextStatus));
            //move card to new status
            assetCard.detach().appendTo(".assetDispatchAssetList[data-statusid=" + assetNextStatus + "][data-instance=" + assetCard.data("instance") + "]");
        });
        {% endif %}


        $('a.assetsBoardToggle[data-toggle="pill"]').on('click', function (e) {
            localStorage.setItem("activeTab-board", e.target.getAttribute('aria-controls'));
        })
    });
</script>